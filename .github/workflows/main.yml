name: Build & Deploy Application

on:
  push:
    branches:
      - "**"  # Trigger on all branches
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - "**"  # Trigger on all branches
  delete:
    branches:
      - "**"  # Trigger on all branches

env:
  DOCKER_REGISTRY: rohittru
  PYTHON_VERSION: '3.11'

jobs:
  build-app:
    name: Build & Deploy App
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push') || 
      (github.event_name == 'pull_request' && github.event.action != 'closed')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          # Get repository name
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Generate Version Info
        run: |
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          
          # Get commit count for version number
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=${COMMIT_COUNT}" >> $GITHUB_ENV
          
          # Generate timestamp
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
          # Combined version string
          echo "VERSION=${COMMIT_COUNT}-${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Assign Port
        run: |
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py assign "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          echo "Assigned port: ${{ env.APP_PORT }}"

      - name: Create Feature App
        run: |
          # Check if app directory already exists
          APP_DIR="${{ env.BRANCH_NAME }}"
          
          if [ ! -d "$APP_DIR" ]; then
            echo "Creating new feature app directory..."
            
            # Create app directory
            mkdir -p "$APP_DIR"
            
            # Copy app template files
            cp -r app-template/* "$APP_DIR/"
            
            # Generate .env file
            {
              echo "APP_NAME=${{ env.REPO_NAME }}_${{ env.BRANCH_NAME }}"
              echo "APP_IMAGE=${{ env.DOCKER_REGISTRY }}/bot-stonk-war:${{ env.BRANCH_NAME }}"
              echo "APP_PORT=${{ env.APP_PORT }}"
              echo "VIRTUAL_HOST=${{ env.BRANCH_NAME }}.emerginary.com"
              echo "VIRTUAL_PORT=${{ env.APP_PORT }}"
              echo "REDIS_HOST=redis"
              echo "ENABLE_SSL=false"
              echo "APP_VERSION=${{ env.VERSION }}"
              echo "APP_COMMIT=${{ env.COMMIT_HASH }}"
              echo "BUILD_TIMESTAMP=${{ env.TIMESTAMP }}"
            } > "$APP_DIR/.env"
            
            # Stage and commit the new feature app
            git add "$APP_DIR"
            git add ports.json
            git commit -m "Create feature app for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
            
            # Push to the feature branch
            git push origin "${{ env.BRANCH_NAME }}"
          else
            echo "Feature app directory already exists, updating port if needed..."
            # Update port in existing .env file
            sed -i "s/APP_PORT=.*/APP_PORT=${{ env.APP_PORT }}/" "$APP_DIR/.env"
            sed -i "s/VIRTUAL_PORT=.*/VIRTUAL_PORT=${{ env.APP_PORT }}/" "$APP_DIR/.env"
            sed -i "s/APP_VERSION=.*/APP_VERSION=${{ env.VERSION }}/" "$APP_DIR/.env"
            sed -i "s/APP_COMMIT=.*/APP_COMMIT=${{ env.COMMIT_HASH }}/" "$APP_DIR/.env"
            sed -i "s/BUILD_TIMESTAMP=.*/BUILD_TIMESTAMP=${{ env.TIMESTAMP }}/" "$APP_DIR/.env"
            
            # Commit port changes if any
            git add "$APP_DIR/.env" ports.json
            git commit -m "Update port for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
            git push origin "${{ env.BRANCH_NAME }}"
          fi
          
          # Export APP_DIR for use in subsequent steps
          echo "APP_DIR=$APP_DIR" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          pip install -r app-template/requirements.txt
          pip install pytest pytest-cov

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.BRANCH_NAME }}
          file: ./${{ env.BRANCH_NAME }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/bot-stonk-war:${{ env.BRANCH_NAME }}
            ${{ env.DOCKER_REGISTRY }}/bot-stonk-war:latest
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  migrate-to-main:
    name: Migrate to Main
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      github.event.pull_request.merged == true &&
      github.base_ref == 'main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Migrate Port to Main Range
        run: |
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py migrate "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          echo "Migrated port: ${{ env.APP_PORT }}"

          # Update .env file with new port
          sed -i "s/APP_PORT=.*/APP_PORT=${{ env.APP_PORT }}/" "${{ env.BRANCH_NAME }}/.env"
          sed -i "s/VIRTUAL_PORT=.*/VIRTUAL_PORT=${{ env.APP_PORT }}/" "${{ env.BRANCH_NAME }}/.env"

          # Commit port changes
          git add ports.json "${{ env.BRANCH_NAME }}/.env"
          git commit -m "Migrate port for ${{ env.BRANCH_NAME }} to main range" || echo "No changes to commit"
          git push origin main

  cleanup:
    if: github.event_name == 'delete' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          fi
          
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Cleanup Feature App
        run: |
          # Remove feature app directory
          rm -rf "${{ env.BRANCH_NAME }}"
          
          # Release port
          git checkout main
          git pull origin main
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}"
          
          git add ports.json
          git commit -m "Release port for ${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin main

  