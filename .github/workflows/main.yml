name: Build & Deploy Application

on:
  push:
    branches:
      - "**"  # Trigger on all branches
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - "**"  # Trigger on all branches
  delete:
    branches:
      - "**"  # Trigger on all branches

env:
  DOCKER_REGISTRY: rohittru
  PYTHON_VERSION: '3.11'

jobs:
  build-app:
    name: Build & Deploy App
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push') || 
      (github.event_name == 'pull_request' && github.event.action != 'closed')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          # Get repository name
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Generate Version Info
        run: |
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          
          # Get commit count for version number
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=${COMMIT_COUNT}" >> $GITHUB_ENV
          
          # Generate timestamp
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
          # Combined version string
          echo "VERSION=${COMMIT_COUNT}-${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Assign Port
        run: |
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py assign "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          echo "Assigned port: ${{ env.APP_PORT }}"

      - name: Create Feature App
        run: |
          # Create app directory in root
          mkdir -p "${{ env.BRANCH_NAME }}"
          
          # Copy app template
          cp -r app-template/* "${{ env.BRANCH_NAME }}/"
          
          # Create .env file with port
          cat > "${{ env.BRANCH_NAME }}/.env" << EOF
          APP_NAME=bot-stonk-war-${{ env.BRANCH_NAME }}
          APP_IMAGE=${{ env.DOCKER_REGISTRY }}/bot-stonk-war:${{ env.BRANCH_NAME }}
          APP_PORT=${{ env.APP_PORT }}
          VIRTUAL_HOST=${{ env.BRANCH_NAME }}.bot-stonk-war.local
          VIRTUAL_PORT=${{ env.APP_PORT }}
          EOF

      - name: Install Dependencies
        run: |
          pip install -r app-template/requirements.txt
          pip install pytest pytest-cov

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.BRANCH_NAME }}
          file: ./${{ env.BRANCH_NAME }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/bot-stonk-war:${{ env.BRANCH_NAME }}
            ${{ env.DOCKER_REGISTRY }}/bot-stonk-war:latest
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  migrate-to-main:
    name: Migrate to Main
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      github.event.pull_request.merged == true &&
      github.base_ref == 'main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Migrate Port to Main Range
        run: |
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py migrate "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" >> $GITHUB_ENV
          echo "Migrated port: ${{ env.APP_PORT }}"

          # Update .env file with new port
          sed -i "s/APP_PORT=.*/APP_PORT=${{ env.APP_PORT }}/" "${{ env.BRANCH_NAME }}/.env"
          sed -i "s/VIRTUAL_PORT=.*/VIRTUAL_PORT=${{ env.APP_PORT }}/" "${{ env.BRANCH_NAME }}/.env"

          # Commit port changes
          git add ports.json "${{ env.BRANCH_NAME }}/.env"
          git commit -m "Migrate port for ${{ env.BRANCH_NAME }} to main range" || echo "No changes to commit"
          git push origin main

  cleanup:
    if: github.event_name == 'delete' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          fi

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Cleanup Feature App
        run: |
          # Remove feature app directory
          rm -rf "${{ env.BRANCH_NAME }}"
          
          # Release port
          git checkout main
          git pull origin main
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}"
          
          git add ports.json
          git commit -m "Release port for ${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin main

  sync-staging:
    name: Sync Staging with main
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: write
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      !contains(github.event.head_commit.message, 'Skip staging sync') ||
      github.event_name == 'schedule'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Sync Staging with main
        run: |
          # Check if staging branch exists, create if it doesn't
          if ! git ls-remote --heads origin staging | grep staging > /dev/null; then
            echo "Creating staging branch from main..."
            git checkout -b staging
            git push -u origin staging
          else
            git checkout staging
          fi

          # Check if there are any open PRs targeting staging
          OPEN_PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?base=staging&state=open" | jq length)
          
          if [ "$OPEN_PRS" -eq "0" ]; then
            echo "No open PRs to staging, safe to sync with main"
            
            # Backup ports.json from staging
            if [ -f "ports.json" ]; then
              echo "Backing up staging ports.json..."
              cp ports.json ports.json.staging
            fi
            
            # Store current staging environment configurations
            if [ -d "environments/staging" ]; then
              echo "Backing up staging environment configurations..."
              mkdir -p /tmp/staging-backup
              cp -r environments/staging/* /tmp/staging-backup/
            fi
            
            # Merge main into staging
            git pull origin staging
            git merge origin/main --no-edit || {
              # If merge fails, it's likely due to ports.json conflict
              if [ -f "ports.json.staging" ]; then
                echo "Resolving ports.json conflict..."
                # Keep staging's port assignments
                cp ports.json.staging ports.json
                git add ports.json
                git commit -m "Merge main into staging (with preserved port assignments)"
              else
                echo "Failed to merge main into staging"
                exit 1
              fi
            }
            
            # Restore staging-specific configurations
            if [ -d "/tmp/staging-backup" ]; then
              echo "Restoring staging environment configurations..."
              cp -r /tmp/staging-backup/* environments/staging/
              
              # Update environment-specific variables
              find environments/staging -type f -name ".env" -exec sed -i'' \
                -e 's/APP_NAME=.*_main/APP_NAME=bot-stonk-warstaging/' \
                -e 's/APP_IMAGE=.*:latest/APP_IMAGE=rohittru\/bot-stonk-warstaging:latest/' \
                -e 's/VIRTUAL_HOST=main\./VIRTUAL_HOST=staging./' \
                -e 's/ENVIRONMENT=production/ENVIRONMENT=staging/' {} +
              
              # Clean up backup
              rm -rf /tmp/staging-backup
            fi
            
            # Clean up ports.json backup
            rm -f ports.json.staging
            
            # Commit and push changes
            git add environments/staging ports.json
            git commit -m "Sync staging with main while preserving staging-specific configs" || echo "No changes to commit"
            git push origin staging
          else
            echo "Found open PRs to staging, skipping sync to avoid conflicts"
            echo "Number of open PRs: $OPEN_PRS"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  cleanup-staging:
    name: Cleanup Staging Environment
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      github.base_ref == 'staging' &&
      !github.event.pull_request.merged
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Cleanup Abandoned Feature
        run: |
          # Get the feature branch name
          FEATURE_BRANCH="${{ github.head_ref }}"
          
          echo "Cleaning up abandoned feature $FEATURE_BRANCH from staging..."
          
          # Checkout staging
          git checkout staging
          git pull origin staging
          
          # Remove feature-specific files/changes by resetting to main
          git fetch origin main:main
          git reset --hard origin/main
          
          # Force push staging to be in sync with main
          git push -f origin staging
          
          echo "✅ Cleaned up abandoned feature $FEATURE_BRANCH from staging"

  handle-staging-pr:
    name: Handle Staging PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Extract Branch Info
        run: |
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          
          # Get repository name
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Assign Staging Port
        if: github.event.pull_request.merged == true
        run: |
          chmod +x scripts/port_manager.py
          
          # Assign a new port for staging
          ./scripts/port_manager.py assign "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" "staging" >> $GITHUB_ENV
          
          echo "New staging port assigned: ${{ env.APP_PORT }}"

      - name: Copy to Staging Environment
        if: github.event.pull_request.merged == true
        run: |
          # Remove existing feature branch from staging if it exists
          rm -rf "environments/staging/${{ env.BRANCH_NAME }}"
          
          # Copy feature branch files to staging
          cp -r "environments/development/${{ env.BRANCH_NAME }}" "environments/staging/"
          
          # Update environment and port in staging .env file only
          sed -i "s/ENVIRONMENT=.*/ENVIRONMENT=staging/" "environments/staging/${{ env.BRANCH_NAME }}/.env"
          sed -i "s/APP_PORT=.*/APP_PORT=${{ env.APP_PORT }}/" "environments/staging/${{ env.BRANCH_NAME }}/.env"
          sed -i "s/VIRTUAL_PORT=.*/VIRTUAL_PORT=${{ env.APP_PORT }}/" "environments/staging/${{ env.BRANCH_NAME }}/.env"
          
          # First commit changes to staging branch
          git add environments/staging ports.json
          git commit -m "Copy ${{ env.BRANCH_NAME }} to staging environment with new port ${{ env.APP_PORT }}"
          git push origin staging
          
          # Now sync ports.json to other branches
          # Sync to main
          git fetch origin main
          git checkout main
          git pull origin main
          cp ports.json ports.json.new
          git checkout staging -- ports.json
          if ! cmp -s ports.json ports.json.new; then
            git add ports.json
            git commit -m "Sync port assignments from staging"
            git push origin main
          fi
          
          # Sync back to feature branch and restore its original port
          git checkout "${{ env.BRANCH_NAME }}"
          git pull origin "${{ env.BRANCH_NAME }}"
          
          # Get the original development port from ports.json
          DEV_PORT=$(jq -r --arg key "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" --arg env "development" \
            '.[$key][$env] // empty' ports.json)
          
          # Update the development .env file with the original port
          if [ ! -z "$DEV_PORT" ]; then
            sed -i "s/APP_PORT=.*/APP_PORT=$DEV_PORT/" "environments/development/${{ env.BRANCH_NAME }}/.env"
            sed -i "s/VIRTUAL_PORT=.*/VIRTUAL_PORT=$DEV_PORT/" "environments/development/${{ env.BRANCH_NAME }}/.env"
            sed -i "s/ENVIRONMENT=.*/ENVIRONMENT=development/" "environments/development/${{ env.BRANCH_NAME }}/.env"
          fi
          
          # Sync ports.json from staging
          cp ports.json ports.json.new
          git checkout staging -- ports.json
          if ! cmp -s ports.json ports.json.new; then
            git add ports.json
            git commit -m "Sync port assignments from staging"
            git push origin "${{ env.BRANCH_NAME }}"
          fi
          
          # Return to staging branch
          git checkout staging

  cleanup-feature:
    name: Cleanup Feature Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && startsWith(github.event.ref, 'feature-')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          BRANCH_NAME="${{ github.event.ref }}"
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Setup Environment Manager
        run: |
          chmod +x scripts/environment_manager.py

      - name: Cleanup Feature Environment
        run: |
          # Check if environment can be safely cleaned up
          DEV_ENV_PATH="environments/development/${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}"
          
          # Attempt to cleanup the environment
          ./scripts/environment_manager.py cleanup --target "$DEV_ENV_PATH"
          
          # Release the port
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release "${{ env.REPO_NAME }}/${{ env.BRANCH_NAME }}" "development"
          
          # Commit port changes
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add ports.json
          git commit -m "Release port for deleted feature branch ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin main || echo "Could not push to main"

  