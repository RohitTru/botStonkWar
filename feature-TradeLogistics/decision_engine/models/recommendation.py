from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Any, Optional

@dataclass
class TradeRecommendation:
    """Model for trade recommendations generated by strategies."""
    
    symbol: str
    action: str  # 'buy' or 'sell'
    confidence: float  # 0.0 to 1.0
    reasoning: str
    timeframe: str  # 'short_term' or 'long_term'
    metadata: Dict[str, Any]
    created_at: datetime = datetime.utcnow()
    strategy_name: Optional[str] = None
    trade_time: Optional[datetime] = None  # When to make the trade
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert recommendation to dictionary format."""
        d = {
            'symbol': self.symbol,
            'action': self.action,
            'confidence': self.confidence,
            'reasoning': self.reasoning,
            'timeframe': self.timeframe,
            'metadata': self.metadata,
            'created_at': self.created_at.isoformat(),
            'strategy_name': self.strategy_name
        }
        if self.trade_time:
            d['trade_time'] = self.trade_time.isoformat()
        return d
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TradeRecommendation':
        """Create recommendation from dictionary format."""
        return cls(
            symbol=data['symbol'],
            action=data['action'],
            confidence=data['confidence'],
            reasoning=data['reasoning'],
            timeframe=data['timeframe'],
            metadata=data['metadata'],
            created_at=datetime.fromisoformat(data['created_at']),
            strategy_name=data.get('strategy_name'),
            trade_time=datetime.fromisoformat(data['trade_time']) if data.get('trade_time') else None
        ) 